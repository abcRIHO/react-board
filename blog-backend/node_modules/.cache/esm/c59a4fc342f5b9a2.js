let Post,mongoose,Joi;_42f‍.x([["getPostById",()=>getPostById],["write",()=>write],["list",()=>list],["read",()=>read],["remove",()=>remove],["update",()=>update]]);_42f‍.w("../../models/post",[["default",["Post"],function(v){Post=v}]]);_42f‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_42f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);



const { ObjectId } = mongoose.Types;

       const getPostById = async (ctx, next) => {
    const { id } = ctx.params;

    if(!ObjectId.isValid(id)) {
        ctx.status = 400; // 400 Bad Request
        return;
    }
    try {
        const post = await Post.findById(id);
        // 포스트가 존재하지 않을 때
        if (!post) {
            ctx.status = 404; // Not found
            return;
        }
        ctx.state.post = post;
        return next();
    }
    catch (e) {
        ctx.throw(500, e);
    }
};

       const write = async ctx  => {
    const schema = Joi.object().keys({
        // 객체가 다음 필드를 가지고 있음을 검증
        title: Joi.string().required(), // required()는 필수 항목
        body: Joi.string().required(),
        tags: Joi.array().items(Joi.string()).required(), // 문자열로 이루어진 배열
    });

    // 검증 후 검증 실패인 경우 에러 처리
    const result = schema.validate(ctx.request.body);
    if (result.error) {
        ctx.status = 400; // Bad request
        ctx.body = result.error;
        return;
    }

    const { title, body, tags } = ctx.request.body;
    const post = new Post ({
        title,
        body,
        tags,
        user: ctx.state.user,
    });
    try {
        await post.save();
        ctx.body = post;
    } catch (e) {{
        ctx.throw(500, e);
    }}
};

       const list = async ctx => {
    // query는 문자열이므로 숫자로 변환
    // 값이 주어지지 않았다면 1을 기본으로 사용
    const page = parseInt(ctx.query.page || '1', 10);
    
    if (page < 1) {
        ctx.status = 400;
        return;
    }

    try {
        const posts = await Post.find().sort({_id : -1 }).limit(10).skip((page - 1) * 10).exec();
        const postCount = await Post.countDocuments().exec();
        ctx.set('Last-Page', Math.ceil(postCount / 10));

        ctx.body = posts.map(post => post.toJSON()).map(post => ({
            ...post,
            body: post.body.length < 200 ? post.body : `${post.body.slice(0, 200)}...`,
        }));
    } catch (e) {
        ctx.throw(500, e);
    }
};

       const read = async ctx => {
    // const { id } = ctx.params;
    // try {
    //     const post = await Post.findById(id).exec();
    //     if (!post) {
    //         ctx.status = 404; // Not Found
    //         return;
    //     }
    //     ctx.body = post;
    // } catch(e) {
    //     ctx.throw(500, e);
    // }
    ctx.body = ctx.state.post;
};

       const remove = async ctx => {
    const { id } = ctx.params;
    try {
        await Post.findByIdAndRemove(id).exec();
        ctx.status = 204; // No Content (성공은 했으나 응답할 데이터 없음)
    } catch (e) {
        ctx.throw(500, e);
    }
};

       const update = async ctx => {
    const { id } = ctx.params;
    // required() 없음
    const schema = Joi.object().keys({
        title: Joi.string(),
        body: Joi.string(),
        tags: Joi.array().items(Joi.string()),
    });

    // 검증 실패 경우 에러 처리
    const result = schema.validate(ctx.request.body);
    if (result.error) {
        ctx.status = 400; // Bad request
        ctx.body = result.error;
        return;
    }

    try {
        const post = await Post.findByIdAndUpdate(id, ctx.request.body, {
            new: true, // 이 값을 설정하면 업데이트된 데이터를 반환
            // fasle일 때는 업데이트 전 데이터 반환
        }).exec();
        if(!post) {
            ctx.status = 404;
            return;
        }
        ctx.body = post;
    } catch (e) {
        ctx.throw(500, e);
    }
}